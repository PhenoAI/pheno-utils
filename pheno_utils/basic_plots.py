# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_basic_plots.ipynb.

# %% auto 0
__all__ = ['data_histplot', 'data_ecdfplot', 'hist_ecdf_plots', 'show_fundus']

# %% ../nbs/01_basic_plots.ipynb 3
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from typing import Optional
from PIL import Image
from smart_open import open

# %% ../nbs/01_basic_plots.ipynb 4
from pheno_utils.config import (
    ALL_COLOR,
    FEMALE_COLOR, 
    MALE_COLOR, 
    generate_synthetic_data
    )

# %% ../nbs/01_basic_plots.ipynb 5
def data_histplot(data: pd.DataFrame, col: str, feature_str: Optional[str] = None,
                  gender_col: str = "sex", plot_both_genders: bool=True, ax=None) -> None:
    """
    Plots a histogram from a DataFrame for a specific column.

    Args:
        data (pd.DataFrame): The DataFrame containing the data to plot.
        col (str): The name of the column to plot.
        feature_str (Optional[str], optional): The name of the feature to plot. Defaults to None.
        gender_col (str, optional): The name of the column containing gender information. Defaults to "sex".
        plot_both_genders (bool, optional): Whether to plot both genders or just one. Defaults to True.
        ax ([type], optional): The axis to plot on. Defaults to None.
    """
    try:
        assert col in data.columns, f"Column {col} not found in data"
        if plot_both_genders:
            assert gender_col in data.columns, f"Gender column {gender_col} not found in data"
    except AssertionError as e:
        print(e)
        return

    if feature_str is None:
        feature_str = col

    if ax is None:
        _, ax = plt.subplots(1, 1, figsize=(6, 4))

    # Plot histogram(s)
    if plot_both_genders:
        idx_male = data[gender_col] == 1
        idx_female = data[gender_col] == 0
        sns.histplot(data.loc[idx_female, col], ax=ax, color=FEMALE_COLOR,
                    label=f'females (N={(data.loc[idx_female, col].count()):,})', alpha=0.5)
        sns.histplot(data.loc[idx_male, col], ax=ax, color=MALE_COLOR,
                    label=f'males (N={(data.loc[idx_male, col].count()):,})', alpha=0.5)
        
    else:
        sns.histplot(data.loc[:, col], ax=ax, color=ALL_COLOR,
                    label=f'N={(data.loc[:, col].count()):,}', alpha=0.5)

    ax.set_xlabel(feature_str, fontsize=16)
    ax.spines["right"].set_visible(False)
    ax.spines["top"].set_visible(False)
    ax.legend()

# %% ../nbs/01_basic_plots.ipynb 9
def data_ecdfplot(data: pd.DataFrame, col: str, feature_str: Optional[str] = None,
                  gender_col: str = "sex", plot_both_genders: bool=True, ax=None) -> None:
    """
    Plots an empirical cumulative distribution function (ECDF) from a DataFrame for a specific column.

    Args:
        data (pd.DataFrame): The DataFrame containing the data to plot.
        col (str): The name of the column to plot.
        feature_str (Optional[str], optional): The name of the feature to plot. Defaults to None.
        gender_col (str, optional): The name of the column containing gender information. Defaults to "sex".
        plot_both_genders (bool, optional): Whether to plot both genders or just one. Defaults to True.
        ax ([type], optional): The axis to plot on. Defaults to None.
    """
    try:
        assert col in data.columns, f"Column {col} not found in data"
        if plot_both_genders:
            assert gender_col in data.columns, f"Gender column {gender_col} not found in data"
    except AssertionError as e:
        print(e)
        return

    if feature_str is None:
        feature_str = col

    if ax is None:
        _, ax = plt.subplots(1, 1, figsize=(6, 4))

    # Plot ecdf(s)
    if plot_both_genders:
        idx_male = data[gender_col] == 1
        idx_female = data[gender_col] == 0
        sns.ecdfplot(data.loc[idx_female, col], ax=ax, color=FEMALE_COLOR,
                    label=f'females (N={(data.loc[idx_female, col].count()):,})', alpha=0.5, lw=4)
        sns.ecdfplot(data.loc[idx_male, col], ax=ax, color=MALE_COLOR,
                    label=f'males (N={(data.loc[idx_male, col].count()):,})', alpha=0.5, lw=4)
        
    else:
        sns.ecdfplot(data.loc[:, col], ax=ax, color=ALL_COLOR,
                    label=f'N={(data.loc[:, col].count()):,}', alpha=0.5, lw=4)

    ax.set_xlabel(feature_str, fontsize=16)
    ax.spines["right"].set_visible(False)
    ax.spines["top"].set_visible(False)
    ax.legend()

# %% ../nbs/01_basic_plots.ipynb 12
def hist_ecdf_plots(data: pd.DataFrame, col: str, feature_str: Optional[str] = None,
                  gender_col: str = "sex", plot_both_genders: bool=True) -> None:
    """
    Plots histograms and empirical cumulative distribution functions (ECDFs) from a DataFrame
    for a specific column.

    Args:
        data: The input DataFrame containing the data to plot.
        col: The column name to plot.
        feature_str: The title of the plot. If not provided, the column name will be used.
        gender_col: The column name indicating sex (default is 'sex' - female:0; male:1).
        plot_both_genders (bool, optional): Whether to plot both genders or just one. Defaults to True.

    Returns:
        None
    """
    try:
        assert col in data.columns, f"Column {col} not found in data"
        if plot_both_genders:
            assert gender_col in data.columns, f"Gender column {gender_col} not found in data"
    except AssertionError as e:
        print(e)
        return

    if feature_str is None:
        feature_str = col

    fig, axes = plt.subplots(1, 2, figsize=(10, 4))

    # Plot histograms
    ax = axes[0]
    data_histplot(data=data, col=col, feature_str=feature_str,
                  gender_col=gender_col, plot_both_genders=plot_both_genders, ax=ax)
    # Plot ECDFs
    ax = axes[1]
    data_ecdfplot(data=data, col=col, feature_str=feature_str,
                  gender_col=gender_col, plot_both_genders=plot_both_genders, ax=ax)

    fig.tight_layout()
    plt.show()

# %% ../nbs/01_basic_plots.ipynb 22
def show_fundus(fname: str) -> None:
    """
    Display a fundus image from an input file path.
    Args:
        fname (str): The file path to the fundus image.
    """
    fig, ax = plt.subplots(1, 1, figsize=(6, 6))
    img = Image.open(open(fname, 'rb'))
    ax.imshow(img, cmap="gray")
    ax.set_xticks([])
    ax.set_yticks([])
    ax.axis('off')
